#include<bits/stdc++.h>
using namespace std;
#define mx 200005

vector<int>g[mx];
int visited[mx];
stack<int>s;
map<string,int>mp;
map<int,string>mp1;
void dfs(int u)
{
    visited[u]=1;
    for(int i=0; i<g[u].size(); i++)
    {
        int v=g[u][i];
        if(visited[v]==0) dfs(v);
    }

    s.push(u);
}
int main()
{
    int n,counter=1;
    mp.clear();
    mp1.clear();
    cout<<"Number of vertices:";
    cin>>n; //number of vertex
    cout<<"\nenter the vertices:";
    for(int i=1; i<=n; i++)
    {
        string p;
        cin>>p;
        mp[p] = i;
        mp1[i] = p;
    }
    int m;
    cout<<"\nNumber of edges:";
    cin>>m; //number of edges
    cout<<"\nenter the edges:";
    while(m--)
    {
        string p,q;
        int u,v;
        cin>>p>>q;
        u = mp[p];
        v = mp[q];
        g[u].push_back(v); //making one directional graph

    }
    for(int i=1; i<=n; i++)
    {
        if(visited[i]==0) dfs(i);
    }
    cout<<"\n";
    for(int i=0; i<n; i++)
    {
        int x=s.top();
        s.pop();

        cout<<"\n"<<mp1[x]<<" "<<x;

    }
    cout<<endl;
    return 0;

}


/*
9
8
1 2
1 4
2 3
6 5
5 8
5 4
6 8
7 8


9
shirt
tie
jacket
belt
pant
underwear
socks
shoes
watch
8
shirt tie
shirt belt
tie jacket
underwear pant
pant shoes
pant belt
underwear shoes
socks shoes



*/
